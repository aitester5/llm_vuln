#!/usr/bin/env python3
"""
LLM Penetration Testing Tool
A CLI tool for testing LLM vulnerabilities using Ollama models
"""

import typer
import asyncio
import json
from typing import Optional, List
from pathlib import Path
import time
from datetime import datetime

from ollama_client import OllamaClient
from vulnerability_tests import PromptInjectionTester, SensitiveDataTester, DoSTester
from report_generator import HTMLReportGenerator
from config import TestConfig, TestResult, VulnerabilityResult

app = typer.Typer(help="LLM Penetration Testing Tool - Test LLM vulnerabilities using OWASP LLM Top 10")

@app.command()
def scan(
    target_model: str = typer.Option("llama3.1:latest", "--target", "-t", help="Target model to test"),
    tester_model: str = typer.Option("llama2-uncensored:latest", "--tester", "-e", help="Tester model to use"),
    output_dir: str = typer.Option("./reports", "--output", "-o", help="Output directory for reports"),
    vulnerabilities: str = typer.Option("all", "--vulns", "-v", help="Comma-separated list of vulnerabilities to test (prompt_injection,sensitive_data,dos,all)"),
    verbose: bool = typer.Option(False, "--verbose", "-V", help="Enable verbose output"),
    timeout: int = typer.Option(30, "--timeout", help="Request timeout in seconds"),
    max_retries: int = typer.Option(3, "--max-retries", help="Maximum retries for failed requests"),
    demo: bool = typer.Option(False, "--demo", help="Run in demo mode with mock responses")
):
    """
    Run LLM penetration testing scan
    """
    asyncio.run(run_scan(
        target_model, tester_model, output_dir, vulnerabilities, verbose, timeout, max_retries, demo
    ))

async def run_scan(
    target_model: str, 
    tester_model: str, 
    output_dir: str, 
    vulnerabilities: str, 
    verbose: bool, 
    timeout: int, 
    max_retries: int
):
    """Main scan execution logic"""
    
    # Initialize configuration
    config = TestConfig(
        target_model=target_model,
        tester_model=tester_model,
        output_dir=output_dir,
        verbose=verbose,
        timeout=timeout,
        max_retries=max_retries
    )
    
    # Create output directory
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    typer.echo(f"üöÄ Starting LLM Penetration Testing")
    typer.echo(f"üìä Target Model: {target_model}")
    typer.echo(f"üîç Tester Model: {tester_model}")
    typer.echo(f"üìÇ Output Directory: {output_dir}")
    typer.echo("=" * 60)
    
    # Initialize Ollama client
    client = OllamaClient(timeout=timeout, max_retries=max_retries)
    
    # Test model availability
    typer.echo("üîç Checking model availability...")
    if not await client.check_model_availability(target_model):
        typer.echo(f"‚ùå Target model '{target_model}' not available. Please pull it first: ollama pull {target_model}")
        return
    
    if not await client.check_model_availability(tester_model):
        typer.echo(f"‚ùå Tester model '{tester_model}' not available. Please pull it first: ollama pull {tester_model}")
        return
    
    typer.echo("‚úÖ All models are available")
    
    # Parse vulnerabilities to test
    if vulnerabilities.lower() == "all":
        vuln_list = ["prompt_injection", "sensitive_data", "dos"]
    else:
        vuln_list = [v.strip() for v in vulnerabilities.split(",")]
    
    typer.echo(f"üéØ Testing vulnerabilities: {', '.join(vuln_list)}")
    typer.echo("=" * 60)
    
    # Initialize test results
    start_time = datetime.now()
    results = TestResult(
        target_model=target_model,
        tester_model=tester_model,
        start_time=start_time,
        vulnerabilities=[]
    )
    
    # Run vulnerability tests
    testers = {
        "prompt_injection": PromptInjectionTester(client, config),
        "sensitive_data": SensitiveDataTester(client, config),  
        "dos": DoSTester(client, config)
    }
    
    for vuln_name in vuln_list:
        if vuln_name in testers:
            typer.echo(f"üîç Testing {vuln_name.replace('_', ' ').title()}...")
            tester = testers[vuln_name]
            
            try:
                vuln_result = await tester.run_tests()
                results.vulnerabilities.append(vuln_result)
                
                # Print summary
                severity_color = {
                    "HIGH": typer.colors.RED,
                    "MEDIUM": typer.colors.YELLOW,
                    "LOW": typer.colors.GREEN,
                    "INFO": typer.colors.BLUE
                }
                
                typer.echo(f"  ‚úÖ {vuln_result.name}: {vuln_result.passed_tests}/{vuln_result.total_tests} tests passed")
                if vuln_result.severity:
                    typer.secho(f"  ‚ö†Ô∏è  Severity: {vuln_result.severity}", fg=severity_color.get(vuln_result.severity, typer.colors.WHITE))
                
            except Exception as e:
                typer.echo(f"  ‚ùå Error testing {vuln_name}: {str(e)}")
                if verbose:
                    typer.echo(f"     Details: {type(e).__name__}")
    
    # Complete results
    results.end_time = datetime.now()
    results.duration = (results.end_time - results.start_time).total_seconds()
    
    typer.echo("=" * 60)
    typer.echo(f"üìä Scan completed in {results.duration:.2f} seconds")
    
    # Generate HTML report
    typer.echo("üìÑ Generating HTML report...")
    report_generator = HTMLReportGenerator(config)
    report_path = await report_generator.generate_report(results)
    
    typer.echo(f"‚úÖ Report generated: {report_path}")
    typer.echo(f"üåê Open in browser: file://{Path(report_path).absolute()}")
    
    # Print summary
    total_vulnerabilities = len([v for v in results.vulnerabilities if v.severity in ["HIGH", "MEDIUM"]])
    if total_vulnerabilities > 0:
        typer.secho(f"‚ö†Ô∏è  Found {total_vulnerabilities} potential vulnerabilities", fg=typer.colors.YELLOW)
    else:
        typer.secho("‚úÖ No critical vulnerabilities found", fg=typer.colors.GREEN)

@app.command()
def list_models():
    """List available Ollama models"""
    asyncio.run(list_available_models())

async def list_available_models():
    """List available models from Ollama"""
    try:
        client = OllamaClient()
        models = await client.list_models()
        
        if models:
            typer.echo("üìã Available Ollama models:")
            for model in models:
                typer.echo(f"  ‚Ä¢ {model}")
        else:
            typer.echo("‚ùå No models found. Please pull models first using 'ollama pull <model>'")
            
    except Exception as e:
        typer.echo(f"‚ùå Error listing models: {str(e)}")

@app.command()
def version():
    """Show version information"""
    typer.echo("LLM Penetration Testing Tool v1.0.0")
    typer.echo("OWASP LLM Top 10 Vulnerability Scanner")

if __name__ == "__main__":
    app()